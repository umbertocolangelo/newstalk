// Mocks generated by Mockito 5.4.4 from annotations
// in dima/test/mocks/mock_setup.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i19;
import 'dart:ui' as _i10;

import 'package:dima/managers/controllers/article_controller.dart' as _i13;
import 'package:dima/managers/controllers/comment_controller.dart' as _i16;
import 'package:dima/managers/controllers/community_controller.dart' as _i8;
import 'package:dima/managers/controllers/thread_controller.dart' as _i12;
import 'package:dima/managers/controllers/user_controller.dart' as _i11;
import 'package:dima/managers/provider/article_provider.dart' as _i15;
import 'package:dima/managers/services/article_service.dart' as _i5;
import 'package:dima/model/article.dart' as _i14;
import 'package:dima/model/comment.dart' as _i6;
import 'package:dima/model/community.dart' as _i2;
import 'package:dima/model/thread.dart' as _i4;
import 'package:dima/model/user.dart' as _i3;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommunity_0 extends _i1.SmartFake implements _i2.Community {
  _FakeCommunity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThread_2 extends _i1.SmartFake implements _i4.Thread {
  _FakeThread_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleService_3 extends _i1.SmartFake
    implements _i5.ArticleService {
  _FakeArticleService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComment_4 extends _i1.SmartFake implements _i6.Comment {
  _FakeComment_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommunityController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommunityController extends _i1.Mock
    implements _i8.CommunityController {
  @override
  List<_i2.Community> get communities => (super.noSuchMethod(
        Invocation.getter(#communities),
        returnValue: <_i2.Community>[],
        returnValueForMissingStub: <_i2.Community>[],
      ) as List<_i2.Community>);

  @override
  set communities(List<_i2.Community>? _communities) => super.noSuchMethod(
        Invocation.setter(
          #communities,
          _communities,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<List<_i2.Community>> fetchCommunities() => (super.noSuchMethod(
        Invocation.method(
          #fetchCommunities,
          [],
        ),
        returnValue: _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
      ) as _i9.Future<List<_i2.Community>>);

  @override
  _i9.Future<void> addCommunity(Map<String, dynamic>? communityData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommunity,
          [communityData],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addThreadToCommunity(
    String? communityId,
    String? threadId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addThreadToCommunity,
          [
            communityId,
            threadId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeThreadFromCommunity(
    String? communityId,
    String? threadId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeThreadFromCommunity,
          [
            communityId,
            threadId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addMemberToCommunity(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToCommunity,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeMemberFromCommunity(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMemberFromCommunity,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateCommunity(
    String? communityId,
    Map<String, dynamic>? newData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCommunity,
          [
            communityId,
            newData,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteCommunity(String? communityId) => (super.noSuchMethod(
        Invocation.method(
          #deleteCommunity,
          [communityId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.Community> getCommunityById(String? communityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommunityById,
          [communityId],
        ),
        returnValue: _i9.Future<_i2.Community>.value(_FakeCommunity_0(
          this,
          Invocation.method(
            #getCommunityById,
            [communityId],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i2.Community>.value(_FakeCommunity_0(
          this,
          Invocation.method(
            #getCommunityById,
            [communityId],
          ),
        )),
      ) as _i9.Future<_i2.Community>);

  @override
  _i9.Future<List<_i2.Community>> getCommunitiesByIds(
          List<String>? communityIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommunitiesByIds,
          [communityIds],
        ),
        returnValue: _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
      ) as _i9.Future<List<_i2.Community>>);

  @override
  _i9.Future<List<_i2.Community>> getCommunityByThreadId(String? threadId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommunityByThreadId,
          [threadId],
        ),
        returnValue: _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
      ) as _i9.Future<List<_i2.Community>>);

  @override
  _i9.Future<List<_i2.Community>> getCommunitiesByUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommunitiesByUserId,
          [userId],
        ),
        returnValue: _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
      ) as _i9.Future<List<_i2.Community>>);

  @override
  _i9.Future<void> requestAccess(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestAccess,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> approveRequest(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #approveRequest,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> rejectRequest(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rejectRequest,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> cancelRequest(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelRequest,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeUserFromCommunity(
    String? communityId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserFromCommunity,
          [
            communityId,
            userId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> doesCommunityExist(String? name) => (super.noSuchMethod(
        Invocation.method(
          #doesCommunityExist,
          [name],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<List<_i2.Community>> fetchCommunityDocID(List<String>? docIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommunityDocID,
          [docIds],
        ),
        returnValue: _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i2.Community>>.value(<_i2.Community>[]),
      ) as _i9.Future<List<_i2.Community>>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserController extends _i1.Mock implements _i11.UserController {
  @override
  List<_i3.User> get users => (super.noSuchMethod(
        Invocation.getter(#users),
        returnValue: <_i3.User>[],
        returnValueForMissingStub: <_i3.User>[],
      ) as List<_i3.User>);

  @override
  set users(List<_i3.User>? _users) => super.noSuchMethod(
        Invocation.setter(
          #users,
          _users,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<List<_i3.User>> fetchUsers() => (super.noSuchMethod(
        Invocation.method(
          #fetchUsers,
          [],
        ),
        returnValue: _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i9.Future<List<_i3.User>>);

  @override
  _i9.Future<void> addUser(
    Map<String, dynamic>? userData,
    String? uid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [
            userData,
            uid,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateUser(
    String? userId,
    Map<String, dynamic>? newData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [
            userId,
            newData,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [userId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i3.User> getUserById(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [userId],
        ),
        returnValue: _i9.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getUserById,
            [userId],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getUserById,
            [userId],
          ),
        )),
      ) as _i9.Future<_i3.User>);

  @override
  _i9.Future<List<_i3.User>> getUsersByThreadId(String? threadId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsersByThreadId,
          [threadId],
        ),
        returnValue: _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i9.Future<List<_i3.User>>);

  @override
  _i9.Future<List<_i3.User>> getUsersByCommunityId(String? communityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsersByCommunityId,
          [communityId],
        ),
        returnValue: _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i9.Future<List<_i3.User>>);

  @override
  _i9.Future<bool> doesUsernameExist(String? username) => (super.noSuchMethod(
        Invocation.method(
          #doesUsernameExist,
          [username],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> doesUserExist(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #doesUserExist,
          [userId],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> addCommunityToUser(
    String? userId,
    String? communityId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommunityToUser,
          [
            userId,
            communityId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeCommunityFromUser(
    String? userId,
    String? communityId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCommunityFromUser,
          [
            userId,
            communityId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addThreadToUser(
    String? userId,
    String? threadId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addThreadToUser,
          [
            userId,
            threadId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeThreadFromUser(
    String? userId,
    String? threadId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeThreadFromUser,
          [
            userId,
            threadId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<Set<String>> getSelectedCategorybyUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSelectedCategorybyUser,
          [userId],
        ),
        returnValue: _i9.Future<Set<String>>.value(<String>{}),
        returnValueForMissingStub: _i9.Future<Set<String>>.value(<String>{}),
      ) as _i9.Future<Set<String>>);

  @override
  _i9.Future<Set<String>> getSelectedSourcesbyUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSelectedSourcesbyUser,
          [userId],
        ),
        returnValue: _i9.Future<Set<String>>.value(<String>{}),
        returnValueForMissingStub: _i9.Future<Set<String>>.value(<String>{}),
      ) as _i9.Future<Set<String>>);

  @override
  _i9.Future<void> setSelctedCategorybyUser(
    String? userId,
    List<String>? selectedCategories,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSelctedCategorybyUser,
          [
            userId,
            selectedCategories,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setSelctedSourcesbyUser(
    String? userId,
    List<String>? selectedCategories,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSelctedSourcesbyUser,
          [
            userId,
            selectedCategories,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThreadController].
///
/// See the documentation for Mockito's code generation for more information.
class MockThreadController extends _i1.Mock implements _i12.ThreadController {
  @override
  List<_i4.Thread> get threads => (super.noSuchMethod(
        Invocation.getter(#threads),
        returnValue: <_i4.Thread>[],
        returnValueForMissingStub: <_i4.Thread>[],
      ) as List<_i4.Thread>);

  @override
  set threads(List<_i4.Thread>? _threads) => super.noSuchMethod(
        Invocation.setter(
          #threads,
          _threads,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<List<_i4.Thread>> fetchThreads() => (super.noSuchMethod(
        Invocation.method(
          #fetchThreads,
          [],
        ),
        returnValue: _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
      ) as _i9.Future<List<_i4.Thread>>);

  @override
  _i9.Future<void> addThread(Map<String, dynamic>? threadData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addThread,
          [threadData],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateThread(
    String? threadId,
    Map<String, dynamic>? newData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateThread,
          [
            threadId,
            newData,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteThread(String? threadId) => (super.noSuchMethod(
        Invocation.method(
          #deleteThread,
          [threadId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i4.Thread> getThreadById(String? threadId) => (super.noSuchMethod(
        Invocation.method(
          #getThreadById,
          [threadId],
        ),
        returnValue: _i9.Future<_i4.Thread>.value(_FakeThread_2(
          this,
          Invocation.method(
            #getThreadById,
            [threadId],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.Thread>.value(_FakeThread_2(
          this,
          Invocation.method(
            #getThreadById,
            [threadId],
          ),
        )),
      ) as _i9.Future<_i4.Thread>);

  @override
  _i9.Future<List<_i4.Thread>> getThreadsByCommunityId(String? communityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThreadsByCommunityId,
          [communityId],
        ),
        returnValue: _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
      ) as _i9.Future<List<_i4.Thread>>);

  @override
  _i9.Future<List<_i4.Thread>> getThreadsByAuthorId(String? authorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThreadsByAuthorId,
          [authorId],
        ),
        returnValue: _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
      ) as _i9.Future<List<_i4.Thread>>);

  @override
  _i9.Future<List<_i4.Thread>> getThreadsByParticipantId(
          String? participantId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThreadsByParticipantId,
          [participantId],
        ),
        returnValue: _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.Thread>>.value(<_i4.Thread>[]),
      ) as _i9.Future<List<_i4.Thread>>);

  @override
  _i9.Future<_i4.Thread> getThreadByCommentId(String? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThreadByCommentId,
          [commentId],
        ),
        returnValue: _i9.Future<_i4.Thread>.value(_FakeThread_2(
          this,
          Invocation.method(
            #getThreadByCommentId,
            [commentId],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.Thread>.value(_FakeThread_2(
          this,
          Invocation.method(
            #getThreadByCommentId,
            [commentId],
          ),
        )),
      ) as _i9.Future<_i4.Thread>);

  @override
  _i9.Future<void> addCommentToThread(
    String? threadId,
    String? commentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommentToThread,
          [
            threadId,
            commentId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeCommentFromThread(
    String? threadId,
    String? commentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCommentFromThread,
          [
            threadId,
            commentId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addParticipantToThread(
    String? threadId,
    String? participantId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addParticipantToThread,
          [
            threadId,
            participantId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addArticleToThread(
    String? threadId,
    String? articleId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addArticleToThread,
          [
            threadId,
            articleId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ArticleController].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleController extends _i1.Mock implements _i13.ArticleController {
  @override
  _i5.ArticleService get articleService => (super.noSuchMethod(
        Invocation.getter(#articleService),
        returnValue: _FakeArticleService_3(
          this,
          Invocation.getter(#articleService),
        ),
        returnValueForMissingStub: _FakeArticleService_3(
          this,
          Invocation.getter(#articleService),
        ),
      ) as _i5.ArticleService);

  @override
  set articleService(_i5.ArticleService? _articleService) => super.noSuchMethod(
        Invocation.setter(
          #articleService,
          _articleService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i14.Article> getArticlesForCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticlesForCategory,
          [category],
        ),
        returnValue: <_i14.Article>[],
        returnValueForMissingStub: <_i14.Article>[],
      ) as List<_i14.Article>);

  @override
  _i9.Future<void> fetchArticlesForCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticlesForCategory,
          [category],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> fetchArticlesForCategoryFilteredBySources(
    String? category,
    Set<String>? sources,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticlesForCategoryFilteredBySources,
          [
            category,
            sources,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> loadMoreArticlesFilteredBySources(
    String? category,
    Set<String>? sources,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMoreArticlesFilteredBySources,
          [
            category,
            sources,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> loadMoreArticles(String? category) => (super.noSuchMethod(
        Invocation.method(
          #loadMoreArticles,
          [category],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> clearAndFetchArticlesForCategory(
    String? category,
    Set<String>? sources,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearAndFetchArticlesForCategory,
          [
            category,
            sources,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void clearArticles() => super.noSuchMethod(
        Invocation.method(
          #clearArticles,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i14.Article>> getArticlesByThreadId(String? threadID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticlesByThreadId,
          [threadID],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i15.ArticleRepository {
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<List<_i14.Article>> fetchArticles(
    String? category,
    int? batchSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticles,
          [
            category,
            batchSize,
          ],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  _i9.Future<List<_i14.Article>> fetchArticlesFilteredBySources(
    String? category,
    Set<String>? sources,
    int? batchSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticlesFilteredBySources,
          [
            category,
            sources,
            batchSize,
          ],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  void resetPagination({String? category}) => super.noSuchMethod(
        Invocation.method(
          #resetPagination,
          [],
          {#category: category},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i14.Article>> retrieveArticlesForCategory(
          String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveArticlesForCategory,
          [category],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  _i9.Future<List<_i14.Article>> retrieveArticlesForArticleId(
          String? articleId) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveArticlesForArticleId,
          [articleId],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  _i9.Future<List<List<_i14.Article>>> retrieveAllArticles() =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveAllArticles,
          [],
        ),
        returnValue:
            _i9.Future<List<List<_i14.Article>>>.value(<List<_i14.Article>>[]),
        returnValueForMissingStub:
            _i9.Future<List<List<_i14.Article>>>.value(<List<_i14.Article>>[]),
      ) as _i9.Future<List<List<_i14.Article>>>);

  @override
  _i9.Future<List<_i14.Article>> fetchArticlesInBatch(List<String>? docIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchArticlesInBatch,
          [docIds],
        ),
        returnValue: _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i14.Article>>.value(<_i14.Article>[]),
      ) as _i9.Future<List<_i14.Article>>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CommentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentController extends _i1.Mock implements _i16.CommentController {
  @override
  List<_i6.Comment> get comments => (super.noSuchMethod(
        Invocation.getter(#comments),
        returnValue: <_i6.Comment>[],
        returnValueForMissingStub: <_i6.Comment>[],
      ) as List<_i6.Comment>);

  @override
  set comments(List<_i6.Comment>? _comments) => super.noSuchMethod(
        Invocation.setter(
          #comments,
          _comments,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<List<_i6.Comment>> fetchComments() => (super.noSuchMethod(
        Invocation.method(
          #fetchComments,
          [],
        ),
        returnValue: _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
      ) as _i9.Future<List<_i6.Comment>>);

  @override
  _i9.Future<void> addComment(Map<String, dynamic>? commentData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [commentData],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateComment(
    String? commentId,
    Map<String, dynamic>? newData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [
            commentId,
            newData,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteComment(String? commentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [commentId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i6.Comment> getCommentById(String? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentById,
          [commentId],
        ),
        returnValue: _i9.Future<_i6.Comment>.value(_FakeComment_4(
          this,
          Invocation.method(
            #getCommentById,
            [commentId],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i6.Comment>.value(_FakeComment_4(
          this,
          Invocation.method(
            #getCommentById,
            [commentId],
          ),
        )),
      ) as _i9.Future<_i6.Comment>);

  @override
  _i9.Future<List<_i6.Comment>> getCommentsByThreadId(String? threadId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsByThreadId,
          [threadId],
        ),
        returnValue: _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
      ) as _i9.Future<List<_i6.Comment>>);

  @override
  _i9.Future<List<_i6.Comment>> getCommentsByUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsByUserId,
          [userId],
        ),
        returnValue: _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i6.Comment>>.value(<_i6.Comment>[]),
      ) as _i9.Future<List<_i6.Comment>>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  @override
  _i9.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i7.Response>);

  @override
  _i9.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i19.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
        returnValueForMissingStub:
            _i9.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
      ) as _i9.Future<_i19.Uint8List>);

  @override
  _i9.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i9.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i9.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
